from flask import Flask, render_template, redirect, url_for, request, flash, session, jsonify, send_from_directory 
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
from flask_mail import Mail, Message
from werkzeug.security import generate_password_hash, check_password_hash
from flask_migrate import Migrate
from datetime import datetime, timedelta, timezone
import os
import imaplib
import email
import re
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from dotenv import load_dotenv

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
URGENT_DAYS_THRESHOLD = 3  # –î–Ω–µ–π –¥–æ —Å—Ä–æ–∫–∞ –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
SHEET_AREA = 2.75 * 2.05  # –ü–ª–æ—â–∞–¥—å –ª–∏—Å—Ç–∞ –≤ –º¬≤ (5.6375)
MAX_FILE_SIZE = 16 * 1024 * 1024  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (16MB)
EXPIRED_DAYS = 180  # –î–Ω–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
STORAGE_LIMIT_MB = 980  # –õ–∏–º–∏—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ú–ë
ORDER_SIZE_MB = 10  # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ –ú–ë
CLEANUP_BATCH_SIZE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ —Ä–∞–∑

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
ALLOWED_EXTENSIONS = {'pdf', 'png', 'jpg', 'jpeg', 'gif', 'txt', 'doc', 'docx', 'xls', 'xlsx', 'dwg', 'dxf'}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

app = Flask(__name__)
app.config.from_object('config.Config')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—á—Ç—ã
mail = Mail(app)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Flask
from models import db, User, Order, Employee, WorkHours, SalaryPeriod, Email, EmailAttachment
db.init_app(app)
migrate = Migrate(app, db)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "login"

os.makedirs(app.config["UPLOAD_FOLDER"], exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with app.app_context():
        try:
            print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            db.create_all()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_count = User.query.count()
            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {user_count}")
            
            if user_count == 0:
                print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
                
                # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                manager = User(
                    username='manager',
                    password=User.hash_password('5678'),
                    role='–ú–µ–Ω–µ–¥–∂–µ—Ä'
                )
                db.session.add(manager)
                
                # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
                admin = User(
                    username='admin',
                    password=User.hash_password('admin123'),
                    role='–ê–¥–º–∏–Ω'
                )
                db.session.add(admin)
                
                # –°–æ–∑–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users_data = [
                    ('worker', '0000', '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ'),
                    ('cutter', '7777', '–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞'),
                    ('polisher', '8888', '–®–ª–∏—Ñ–æ–≤–∫–∞'),
                    ('monitor', '9999', '–ú–æ–Ω–∏—Ç–æ—Ä')
                ]
                
                for username, password, role in users_data:
                    user = User(
                        username=username,
                        password=User.hash_password(password),
                        role=role
                    )
                    db.session.add(user)
                
                db.session.commit()
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
            else:
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            
            print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()

# –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
init_database()

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def secure_filename_custom(filename):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    import re
    # –£–¥–∞–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    filename = re.sub(r'[^\w\-_\.]', '_', filename)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(filename) > 100:
        name, ext = os.path.splitext(filename)
        filename = name[:95] + ext
    return filename

def get_storage_usage_mb():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ú–ë"""
    try:
        upload_folder = app.config["UPLOAD_FOLDER"]
        total_size = 0
        
        for dirpath, dirnames, filenames in os.walk(upload_folder):
            for filename in filenames:
                filepath = os.path.join(dirpath, filename)
                if os.path.exists(filepath):
                    total_size += os.path.getsize(filepath)
        
        return total_size / (1024 * 1024)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–ë
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
        return 0

def cleanup_old_orders():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    try:
        current_usage = get_storage_usage_mb()
        print(f"üìä –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {current_usage:.2f} –ú–ë")
        
        if current_usage >= STORAGE_LIMIT_MB:
            print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ({STORAGE_LIMIT_MB} –ú–ë). –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É...")
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" (shipment = True)
            old_orders = Order.query.filter_by(shipment=True).order_by(Order.due_date.asc()).limit(CLEANUP_BATCH_SIZE).all()
            
            if old_orders:
                deleted_count = 0
                for order in old_orders:
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∑–∞–∫–∞–∑–∞
                    if order.filepaths:
                        file_paths = order.filepaths.split(';')
                        for file_path in file_paths:
                            if file_path.strip():
                                full_path = os.path.join(app.config["UPLOAD_FOLDER"], file_path.strip())
                                if os.path.exists(full_path):
                                    try:
                                        os.remove(full_path)
                                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                                    except Exception as e:
                                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    db.session.delete(order)
                    deleted_count += 1
                
                db.session.commit()
                
                new_usage = get_storage_usage_mb()
                freed_space = current_usage - new_usage
                
                print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {deleted_count}")
                print(f"üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {freed_space:.2f} –ú–ë")
                print(f"üìä –ù–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {new_usage:.2f} –ú–ë")
                
                return deleted_count
            else:
                print("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return 0
        else:
            print(f"‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –Ω–æ—Ä–º–µ: {current_usage:.2f} –ú–ë / {STORAGE_LIMIT_MB} –ú–ë")
            return 0
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
        import traceback
        traceback.print_exc()
        return 0

@app.template_filter("zip")
def zip_filter(a, b):
    return zip(a, b)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.before_request
def clear_session_if_not_logged_in():
    if not current_user.is_authenticated:
        session.clear()

def is_urgent_order(order):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ —Å—Ä–æ—á–Ω—ã–º.
    –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã: –æ—Å—Ç–∞–ª–æ—Å—å URGENT_DAYS_THRESHOLD –¥–Ω–µ–π –∏–ª–∏ –º–µ–Ω—å—à–µ –¥–æ —Å—Ä–æ–∫–∞ —Å–¥–∞—á–∏.
    """
    days_left = (order.due_date - datetime.now(timezone.utc).date()).days
    return days_left <= URGENT_DAYS_THRESHOLD

def generate_daily_pool():
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–ª –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∫–∏:
    1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ä–æ—á–Ω—ã–º –∑–∞–∫–∞–∑–∞–º (–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é)
    2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ª–∏—Å—Ç–æ–≤ –ú–î–§
    3. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É —Ñ–∞—Å–∞–¥–∞
    4. –õ–∏—Å—Ç –ú–î–§: 2750√ó2050 = 5.6375 –º¬≤
    """
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ú–î–§ –ª–∏—Å—Ç–∞ 2750√ó2050 –º–º
    SHEET_AREA = 2.75 * 2.05  # 5.6375 –º¬≤
    MAX_SHEET_COUNT = 4
    LARGE_ORDER_THRESHOLD = SHEET_AREA * MAX_SHEET_COUNT  # 22.55 –º¬≤
    OPTIMAL_UTILIZATION = 0.85  # 85% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∏–º
    ACCEPTABLE_WASTE = 0.3  # –î–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤ –º¬≤

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞—Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    candidates = Order.query.filter(
        Order.milling == False,
        Order.shipment == False,
        Order.area != None,
        Order.area > 0
    ).order_by(Order.due_date.asc()).all()

    if not candidates:
        return []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    urgent_orders = [o for o in candidates if is_urgent_order(o)]
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã - –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Å—Ä–æ—á–Ω—ã–π, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    if urgent_orders:
        urgent_order = urgent_orders[0]
        # –ï—Å–ª–∏ —Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π - –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–ª
        if urgent_order.area >= LARGE_ORDER_THRESHOLD:
            return [urgent_order]
        
        # –î–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ –¥–æ 4 –ª–∏—Å—Ç–æ–≤
        same_type_urgent = [o for o in urgent_orders if o.facade_type == urgent_order.facade_type]
        pool = []
        total_area = 0
        
        for order in same_type_urgent:
            if total_area + order.area <= LARGE_ORDER_THRESHOLD:
                pool.append(order)
                total_area += order.area
            else:
                break
        
        return pool

    # –û–±—ã—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–µ—Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    first_order = candidates[0]
    target_facade_type = first_order.facade_type

    # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π (>4 –ª–∏—Å—Ç–æ–≤) - –¥–µ–ª–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–ª
    if first_order.area >= LARGE_ORDER_THRESHOLD:
        return [first_order]

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
    same_type_orders = [o for o in candidates if o.facade_type == target_facade_type]
    
    # –ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: –∏—â–µ–º –ª—É—á—à—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤
    best_combination = find_optimal_combination(same_type_orders, SHEET_AREA, MAX_SHEET_COUNT)
    
    return best_combination if best_combination else [first_order]

def find_optimal_combination(orders, sheet_area, max_sheets):
    """
    –ò—â–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∂–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
    """
    max_total_area = sheet_area * max_sheets
    best_combination = []
    best_efficiency = 0
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –∑–∞–∫–∞–∑–∞
    combination1 = pack_orders_greedy(orders, max_total_area, sort_by='area_desc')
    efficiency1 = calculate_efficiency(combination1, sheet_area)
    
    if efficiency1 > best_efficiency:
        best_combination = combination1
        best_efficiency = efficiency1
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º—ã—Ö —Å—Ä–æ—á–Ω—ã—Ö
    combination2 = pack_orders_greedy(orders, max_total_area, sort_by='due_date')
    efficiency2 = calculate_efficiency(combination2, sheet_area)
    
    if efficiency2 > best_efficiency:
        best_combination = combination2
        best_efficiency = efficiency2
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è - –∏—â–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–æ –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞
    combination3 = pack_orders_complementary(orders, max_total_area, sheet_area)
    efficiency3 = calculate_efficiency(combination3, sheet_area)
    
    if efficiency3 > best_efficiency:
        best_combination = combination3
        best_efficiency = efficiency3
    
    return best_combination

def pack_orders_greedy(orders, max_area, sort_by='area_desc'):
    """–ñ–∞–¥–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    if sort_by == 'area_desc':
        sorted_orders = sorted(orders, key=lambda x: x.area, reverse=True)
    elif sort_by == 'due_date':
        sorted_orders = sorted(orders, key=lambda x: x.due_date)
    else:
        sorted_orders = orders[:]
    
    combination = []
    total_area = 0
    
    for order in sorted_orders:
        if total_area + order.area <= max_area:
            combination.append(order)
            total_area += order.area
    
    return combination

def pack_orders_complementary(orders, max_area, sheet_area):
    """
    –ò—â–µ—Ç –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–æ –∫–æ–º–±–∏–Ω–∏—Ä—É—é—Ç—Å—è –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
    """
    if not orders:
        return []
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (—Å–∞–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
    combination = [orders[0]]
    total_area = orders[0].area
    remaining_orders = orders[1:]
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–æ –¥–æ–ø–æ–ª–Ω—è—é—Ç —Ç–µ–∫—É—â—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    while remaining_orders and total_area < max_area:
        best_fit = None
        best_waste = float('inf')
        
        for order in remaining_orders:
            if total_area + order.area <= max_area:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
                new_total = total_area + order.area
                sheets_needed = (new_total / sheet_area)
                full_sheets = int(sheets_needed)
                
                if sheets_needed == full_sheets:
                    waste = 0  # –ò–¥–µ–∞–ª—å–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
                else:
                    waste = sheet_area - (new_total - full_sheets * sheet_area)
                
                # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
                if waste < best_waste:
                    best_waste = waste
                    best_fit = order
        
        if best_fit:
            combination.append(best_fit)
            total_area += best_fit.area
            remaining_orders.remove(best_fit)
        else:
            break
    
    return combination

def calculate_efficiency(combination, sheet_area):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    """
    if not combination:
        return 0
    
    total_area = sum(order.area for order in combination)
    sheets_needed = total_area / sheet_area
    full_sheets = int(sheets_needed)
    
    if sheets_needed == full_sheets:
        # –ò–¥–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        return 1.0
    else:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–∏—Å—Ç–∞
        partial_sheet_usage = (total_area - full_sheets * sheet_area) / sheet_area
        # –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if full_sheets > 0:
            return (full_sheets + partial_sheet_usage) / (full_sheets + 1)
        else:
            return partial_sheet_usage

def send_email_notification(to_email, subject, template, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        msg = Message(
            subject=subject,
            recipients=[to_email],
            html=render_template(template, **kwargs)
        )
        mail.send(msg)
        print(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        return False

def send_order_notification(order, notification_type):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
    if not order.client or '@' not in order.client:
        return False
    
    if notification_type == "ready":
        subject = f"–ó–∞–∫–∞–∑ {order.order_id} –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"
        template = "email/order_ready.html"
    elif notification_type == "shipped":
        subject = f"–ó–∞–∫–∞–∑ {order.order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        template = "email/order_shipped.html"
    else:
        return False
    
    return send_email_notification(
        to_email=order.client,
        subject=subject,
        template=template,
        order=order,
        datetime=datetime
    )

def fetch_incoming_emails():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ IMAP"""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É Mail.ru
        mail_server = imaplib.IMAP4_SSL('imap.mail.ru', 993)
        mail_server.login(app.config['MAIL_USERNAME'], app.config['MAIL_PASSWORD'])
        mail_server.select('INBOX')
        
        # –ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
        status, messages = mail_server.search(None, 'UNSEEN')
        
        if status != 'OK':
            return []
        
        email_ids = messages[0].split()
        new_emails = []
        
        for email_id in email_ids[-10:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–∏—Å–µ–º
            status, msg_data = mail_server.fetch(email_id, '(RFC822)')
            
            if status != 'OK':
                continue
                
            raw_email = msg_data[0][1]
            email_message = email.message_from_bytes(raw_email)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
            subject = email_message.get('Subject', '')
            sender = email_message.get('From', '')
            recipient = app.config['MAIL_USERNAME']
            date_str = email_message.get('Date', '')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
            body = ""
            html_body = ""
            
            if email_message.is_multipart():
                for part in email_message.walk():
                    content_type = part.get_content_type()
                    content_disposition = str(part.get("Content-Disposition"))
                    
                    if content_type == "text/plain" and "attachment" not in content_disposition:
                        body = part.get_payload(decode=True).decode('utf-8', errors='ignore')
                    elif content_type == "text/html" and "attachment" not in content_disposition:
                        html_body = part.get_payload(decode=True).decode('utf-8', errors='ignore')
            else:
                body = email_message.get_payload(decode=True).decode('utf-8', errors='ignore')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –ø–∏—Å—å–º–æ –≤ –±–∞–∑–µ
            existing_email = Email.query.filter_by(
                sender=sender,
                subject=subject,
                recipient=recipient
            ).first()
            
            if not existing_email:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                new_email = Email(
                    message_id=email_message.get('Message-ID', ''),
                    subject=subject,
                    sender=sender,
                    recipient=recipient,
                    body=body,
                    html_body=html_body,
                    is_read=False,
                    is_sent=False,
                    created_at=datetime.now()
                )
                
                db.session.add(new_email)
                new_emails.append(new_email)
        
        db.session.commit()
        mail_server.close()
        mail_server.logout()
        
        return new_emails
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º: {e}")
        return []

def send_email_with_storage(to_email, subject, body, html_body=None, reply_to_id=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∏—Å—å–º–æ
        msg = Message(
            subject=subject,
            recipients=[to_email],
            body=body,
            html=html_body,
            sender=app.config['MAIL_DEFAULT_SENDER']
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        mail.send(msg)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        sent_email = Email(
            subject=subject,
            sender=app.config['MAIL_DEFAULT_SENDER'],
            recipient=to_email,
            body=body,
            html_body=html_body,
            is_read=True,
            is_sent=True,
            reply_to_id=reply_to_id,
            sent_at=datetime.now()
        )
        
        db.session.add(sent_email)
        db.session.commit()
        
        print(f"‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {to_email}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {e}")
        return False

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        user = User.query.filter_by(username=username).first()

        if user and check_password_hash(user.password, password):
            login_user(user)
            if user.role == "–ú–æ–Ω–∏—Ç–æ—Ä":
                return redirect(url_for("monitor"))
            elif user.role == "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
                return redirect(url_for("milling_station"))
            elif user.role == "–®–ª–∏—Ñ–æ–≤–∫–∞":
                return redirect(url_for("polishing_station"))
            return redirect(url_for("dashboard"))

        flash("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    return render_template("login.html")

@app.route("/logout")
@login_required
def logout():
    logout_user()
    return redirect(url_for("login"))

@app.route("/", methods=["GET", "POST"])
@login_required
def dashboard():
    if current_user.role == "–ú–æ–Ω–∏—Ç–æ—Ä":
        return redirect(url_for("monitor"))
    if current_user.role == "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
        return redirect(url_for("milling_station"))
    if current_user.role == "–®–ª–∏—Ñ–æ–≤–∫–∞":
        return redirect(url_for("polishing_station"))
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if current_user.role == "–ê–¥–º–∏–Ω":
        return render_admin_dashboard()

    cutoff = datetime.now(timezone.utc).date() - timedelta(days=EXPIRED_DAYS)
    expired = Order.query.filter(Order.shipment == True, Order.due_date < cutoff).all()

    for o in expired:
        if o.filepaths:
            for path in o.filepaths.split(";"):
                try:
                    os.remove(os.path.join("static", path))
                except (FileNotFoundError, OSError) as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {path}: {e}")
        db.session.delete(o)

    if expired:
        db.session.commit()
        flash(f"üßπ –£–¥–∞–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(expired)}")

    if request.method == "POST" and current_user.role == "–ú–µ–Ω–µ–¥–∂–µ—Ä":
        order_id = request.form["order_id"]
        client = request.form["client"]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            days = int(request.form["days"])
            if days <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except (ValueError, KeyError):
            flash("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π", "error")
            return redirect(url_for("dashboard"))
        
        facade_type = request.form.get("facade_type") or None
        area = request.form.get("area")
        
        try:
            area = float(area) if area else None
            if area is not None and area <= 0:
                raise ValueError("–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            flash("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å", "error")
            return redirect(url_for("dashboard"))
        
        due_date = datetime.now(timezone.utc).date() + timedelta(days=days)

        uploaded_files = request.files.getlist("files")
        filenames = []
        filepaths = []

        for f in uploaded_files:
            if f and f.filename:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                if not allowed_file(f.filename):
                    flash(f"–§–∞–π–ª {f.filename} –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø", "error")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                f.seek(0, 2)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                file_size = f.tell()
                f.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
                
                if file_size > MAX_FILE_SIZE:
                    flash(f"–§–∞–π–ª {f.filename} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º {MAX_FILE_SIZE // (1024*1024)}MB)", "error")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                safe_filename = secure_filename_custom(f.filename)
                filenames.append(safe_filename)
                path = os.path.join(app.config["UPLOAD_FOLDER"], safe_filename)
                f.save(path)
                filepaths.append(os.path.relpath(path, start="static"))

        order = Order(
            order_id=order_id,
            client=client,
            days=days,
            due_date=due_date,
            milling=False,
            packaging=False,
            shipment=False,
            paid=False,
            filenames=";".join(filenames),
            filepaths=";".join(filepaths),
            facade_type=facade_type,
            area=area
        )

        db.session.add(order)
        db.session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        cleanup_old_orders()
        
        flash("‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω!")
        return redirect(url_for("dashboard"))

    # –î–ª—è —Ä–æ–ª–∏ "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ—Å–ª–µ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∫–∏ –∏ —à–ª–∏—Ñ–æ–≤–∫–∏
    if current_user.role == "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ":
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∫—É –∏ —à–ª–∏—Ñ–æ–≤–∫—É
        orders = Order.query.filter(
            Order.milling == True,
            Order.polishing_1 == True,
            Order.shipment == False
        ).order_by(
            # –°–Ω–∞—á–∞–ª–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–±–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏), –∑–∞—Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
            Order.packaging.asc(),
            Order.due_date.asc()
        ).all()
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
        orders = Order.query.order_by(Order.due_date).all()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    storage_usage = get_storage_usage_mb()
    storage_info = {
        'current_mb': round(storage_usage, 2),
        'limit_mb': STORAGE_LIMIT_MB,
        'percentage': round((storage_usage / STORAGE_LIMIT_MB) * 100, 1)
    }
    
    return render_template("dashboard.html", orders=orders, datetime=datetime, storage_info=storage_info)

def render_admin_dashboard():
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if request.method == "POST":
        order_id = request.form["order_id"]
        client = request.form["client"]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            days = int(request.form["days"])
            if days <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except (ValueError, KeyError):
            flash("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π", "error")
            return redirect(url_for("edit_order", order_id=order_id))
        
        facade_type = request.form.get("facade_type") or None
        area = request.form.get("area")
        
        try:
            area = float(area) if area else None
            if area is not None and area <= 0:
                raise ValueError("–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            flash("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å", "error")
            return redirect(url_for("edit_order", order_id=order_id))
        
        due_date = datetime.now(timezone.utc).date() + timedelta(days=days)

        order = Order(
            order_id=order_id,
            client=client,
            days=days,
            due_date=due_date,
            milling=False,
            packaging=False,
            shipment=False,
            paid=False,
            filenames="",
            filepaths="",
            facade_type=facade_type,
            area=area
        )

        db.session.add(order)
        db.session.commit()
        flash("‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω!")
        return redirect(url_for("dashboard"))

    orders = Order.query.order_by(Order.due_date).all()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    storage_usage = get_storage_usage_mb()
    storage_info = {
        'current_mb': round(storage_usage, 2),
        'limit_mb': STORAGE_LIMIT_MB,
        'percentage': round((storage_usage / STORAGE_LIMIT_MB) * 100, 1)
    }
    
    return render_template("admin_dashboard.html", orders=orders, datetime=datetime, current_user=current_user, storage_info=storage_info)

@app.route("/delete_order/<int:order_id>", methods=["DELETE"])
@login_required
def delete_order(order_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)"""
    if current_user.role not in ["–ê–¥–º–∏–Ω", "–ú–µ–Ω–µ–¥–∂–µ—Ä"]:
        return jsonify({"success": False, "message": "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}), 403
    
    try:
        order = Order.query.get_or_404(order_id)
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if order.filepaths:
            for path in order.filepaths.split(";"):
                try:
                    os.remove(os.path.join("static", path))
                except (FileNotFoundError, OSError) as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {path}: {e}")
        
        db.session.delete(order)
        db.session.commit()
        
        return jsonify({"success": True, "message": "‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω"})
    except Exception as e:
        db.session.rollback()
        return jsonify({"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"}), 500

@app.route("/update_status/<int:order_id>", methods=["POST"])
@login_required
def update_status(order_id):
    if current_user.role not in ["–ê–¥–º–∏–Ω", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞", "–®–ª–∏—Ñ–æ–≤–∫–∞"]:
        return "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", 403

    order = Order.query.get_or_404(order_id)
    form = request.form

    order.milling = form.get("milling") == "1"
    order.polishing_1 = form.get("polishing_1") == "1"
    order.packaging = form.get("packaging") == "1"
    order.shipment = form.get("shipment") == "1"
    order.paid = form.get("paid") == "1"

    db.session.commit()
    return "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", 200

@app.route("/update_stage", methods=["POST"])
@login_required
def update_stage():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ (–¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —à–ª–∏—Ñ–æ–≤–∫–∏)"""
    if current_user.role not in ["–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞", "–®–ª–∏—Ñ–æ–≤–∫–∞"]:
        return "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", 403

    data = request.get_json()
    order_id = data.get("order_id")
    field_name = data.get("field_name")
    value = data.get("value")

    if not all([order_id, field_name is not None, value is not None]):
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", 400

    order = Order.query.get_or_404(order_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–Ω–æ –µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å
    allowed_fields = ["polishing_1", "milling", "packaging", "shipment", "paid"]
    if field_name not in allowed_fields:
        return "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–æ–ª–µ", 400

    setattr(order, field_name, value)
    db.session.commit()
    
    return "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", 200

@app.route("/monitor")
@login_required
def monitor():
    if current_user.role != "–ú–æ–Ω–∏—Ç–æ—Ä":
        return redirect(url_for("dashboard"))

    orders = Order.query.filter(Order.milling == True, Order.shipment == False).order_by(Order.due_date).all()
    return render_template("monitor.html", orders=orders, datetime=datetime)

@app.route("/milling", methods=["GET", "POST"])
@login_required
def milling_station():
    if current_user.role != "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
        return redirect(url_for("dashboard"))

    pool = generate_daily_pool()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    pool_info = {
        'is_urgent': any(is_urgent_order(order) for order in pool) if pool else False,
        'efficiency': 0,
        'waste': 0
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_urgency = {}
    for order in pool:
        days_left = (order.due_date - datetime.now(timezone.utc).date()).days
        order_urgency[order.id] = {
            'is_urgent': is_urgent_order(order),
            'days_left': days_left
        }
    
    if pool:
        total_area = sum(order.area for order in pool)
        sheet_area = SHEET_AREA
        sheets_needed = total_area / sheet_area
        full_sheets = int(sheets_needed)
        partial_sheet = sheets_needed - full_sheets
        
        if partial_sheet > 0:
            pool_info['waste'] = sheet_area - (total_area - full_sheets * sheet_area)
            pool_info['efficiency'] = (total_area / ((full_sheets + 1) * sheet_area)) * 100
        else:
            pool_info['waste'] = 0
            pool_info['efficiency'] = 100
    
    return render_template("milling.html", orders=pool, pool_info=pool_info, order_urgency=order_urgency)

@app.route("/mark_pool_complete", methods=["POST"])
@login_required
def mark_pool_complete():
    if current_user.role != "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
        return "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", 403

    pool = generate_daily_pool()
    for order in pool:
        order.milling = True

    db.session.commit()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –æ—Ç–≤–µ—Ç –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
    if request.headers.get('Content-Type') == 'application/json':
        return {"success": True, "message": "‚úÖ –ü—É–ª –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω"}
    
    flash("‚úÖ –ü—É–ª –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω. –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π...")
    return redirect(url_for("milling_station"))

@app.route("/milling-pool")
@login_required
def milling_pool():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É–ª–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ñ—Ä–µ–∑–µ—Ä–æ–≤—â–∏–∫–∞"""
    if current_user.role != "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
        return redirect(url_for("dashboard"))

    pool = generate_daily_pool()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    pool_info = {
        'is_urgent': any(is_urgent_order(order) for order in pool) if pool else False,
        'efficiency': 0,
        'waste': 0
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_urgency = {}
    for order in pool:
        days_left = (order.due_date - datetime.now(timezone.utc).date()).days
        order_urgency[order.id] = {
            'is_urgent': is_urgent_order(order),
            'days_left': days_left
        }
    
    if pool:
        total_area = sum(order.area for order in pool)
        sheet_area = SHEET_AREA
        sheets_needed = total_area / sheet_area
        full_sheets = int(sheets_needed)
        partial_sheet = sheets_needed - full_sheets
        
        if partial_sheet > 0:
            pool_info['waste'] = sheet_area - (total_area - full_sheets * sheet_area)
            pool_info['efficiency'] = (total_area / ((full_sheets + 1) * sheet_area)) * 100
        else:
            pool_info['waste'] = 0
            pool_info['efficiency'] = 100
    
    return render_template("milling_pool.html", orders=pool, pool_info=pool_info, order_urgency=order_urgency)

@app.route("/milling-orders")
@login_required
def milling_orders():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ –¥–ª—è —Ñ—Ä–µ–∑–µ—Ä–æ–≤—â–∏–∫–∞"""
    if current_user.role != "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
        return redirect(url_for("dashboard"))

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    orders = Order.query.filter(Order.shipment == False).order_by(Order.due_date.asc()).all()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É–ª
    current_pool = generate_daily_pool()
    pool_order_ids = [order.id for order in current_pool]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_urgency = {}
    for order in orders:
        days_left = (order.due_date - datetime.now(timezone.utc).date()).days
        order_urgency[order.id] = {
            'is_urgent': is_urgent_order(order),
            'days_left': days_left
        }
    
    return render_template("milling_orders.html", 
                         orders=orders, 
                         current_pool=current_pool,
                         pool_order_ids=pool_order_ids,
                         order_urgency=order_urgency)

@app.route("/update_milling_manual", methods=["POST"])
@login_required
def update_milling_manual():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∫–∏ —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º –ø—É–ª–∞"""
    if current_user.role != "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
        return jsonify({"success": False, "message": "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}), 403
    
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "message": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400
            
        order_id = data.get('order_id')
        status = data.get('status')
        
        if order_id is None or status is None:
            return jsonify({"success": False, "message": "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"}), 400
        
        order = Order.query.get(order_id)
        if not order:
            return jsonify({"success": False, "message": "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        order.milling = status
        db.session.commit()
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—É–ª –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        new_pool = generate_daily_pool()
        pool_info = {
            'is_urgent': any(is_urgent_order(order) for order in new_pool) if new_pool else False,
            'efficiency': 0,
            'waste': 0
        }
        
        if new_pool:
            total_area = sum(order.area for order in new_pool)
            sheet_area = SHEET_AREA
            sheets_needed = total_area / sheet_area
            full_sheets = int(sheets_needed)
            partial_sheet = sheets_needed - full_sheets
            
            if partial_sheet > 0:
                pool_info['waste'] = sheet_area - (total_area - full_sheets * sheet_area)
                pool_info['efficiency'] = (total_area / ((full_sheets + 1) * sheet_area)) * 100
            else:
                pool_info['waste'] = 0
                pool_info['efficiency'] = 100
        
        return jsonify({
            'success': True,
            'message': f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order.order_id} –æ–±–Ω–æ–≤–ª–µ–Ω",
            'new_pool': [
                {
                    'id': o.id,
                    'order_id': o.order_id,
                    'client': o.client,
                    'area': o.area,
                    'facade_type': o.facade_type,
                    'due_date': o.due_date.strftime('%Y-%m-%d'),
                    'is_urgent': is_urgent_order(o)
                } for o in new_pool
            ],
            'pool_info': pool_info
        })
    except Exception as e:
        db.session.rollback()
        return jsonify({"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500
@app.route("/update_polishing", methods=["POST"])
@login_required
def update_polishing():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —à–ª–∏—Ñ–æ–≤–∫–∏"""
    if current_user.role not in ["–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞", "–®–ª–∏—Ñ–æ–≤–∫–∞"]:
        return jsonify({"success": False, "message": "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}), 403
    
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "message": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400
            
        order_id = data.get('order_id')
        status = data.get('status')
        
        if order_id is None or status is None:
            return jsonify({"success": False, "message": "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"}), 400
        
        order = Order.query.get(order_id)
        if not order:
            return jsonify({"success": False, "message": "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        order.polishing_1 = status
        db.session.commit()
        
        return jsonify({
            'success': True,
            'message': f"‚úÖ –°—Ç–∞—Ç—É—Å —à–ª–∏—Ñ–æ–≤–∫–∏ –∑–∞–∫–∞–∑–∞ {order.order_id} –æ–±–Ω–æ–≤–ª–µ–Ω"
        })
    except Exception as e:
        db.session.rollback()
        return jsonify({"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

@app.route("/polishing")
@login_required
def polishing_station():
    if current_user.role not in ["–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞", "–®–ª–∏—Ñ–æ–≤–∫–∞"]:
        return redirect(url_for("dashboard"))

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ —à–ø–æ–Ω (—à–ø–æ–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —à–ª–∏—Ñ–æ–≤–∫–∏)
    orders = Order.query.filter(
        Order.milling == True,
        Order.facade_type != "—à–ø–æ–Ω",
        Order.shipment == False
    ).order_by(Order.due_date.asc()).all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_urgency = {}
    for order in orders:
        days_left = (order.due_date - datetime.now(timezone.utc).date()).days
        order_urgency[order.id] = {
            'is_urgent': is_urgent_order(order),
            'days_left': days_left
        }
    
    return render_template("polishing.html", orders=orders, order_urgency=order_urgency)

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

@app.route("/admin/salary")
@login_required
def admin_salary():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏"""
    if current_user.role != "–ê–¥–º–∏–Ω":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("dashboard"))
    
    try:
        employees = Employee.query.filter_by(is_active=True).all()
        current_year = datetime.now().year
        current_month = datetime.now().month
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º
        work_hours_data = calculate_work_hours_data(employees, current_year, current_month)
        
        return render_template("admin_salary.html", 
                             employees=employees,
                             work_hours_data=work_hours_data or {},
                             current_year=current_year)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ admin_salary: {e}")
        import traceback
        traceback.print_exc()
        flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞—Ä–ø–ª–∞—Ç", "error")
        return redirect(url_for("dashboard"))

@app.route("/admin/employees", methods=["GET", "POST"])
@login_required
def admin_employees():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
    if current_user.role != "–ê–¥–º–∏–Ω":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("dashboard"))
    
    if request.method == "POST":
        action = request.form.get("action")
        
        if action == "add_employee":
            name = request.form.get("name")
            position = request.form.get("position")
            try:
                hourly_rate = float(request.form.get("hourly_rate", 0))
                if hourly_rate < 0:
                    raise ValueError("–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
            except (ValueError, TypeError):
                flash("–ù–µ–≤–µ—Ä–Ω–∞—è —á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "error")
                return redirect(url_for("admin_employees"))
            
            if name and position:
                employee = Employee(
                    name=name,
                    position=position,
                    hourly_rate=hourly_rate
                )
                db.session.add(employee)
                db.session.commit()
                flash(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} –¥–æ–±–∞–≤–ª–µ–Ω", "success")
            else:
                flash("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", "error")
        
        elif action == "update_employee":
            employee_id = request.form.get("employee_id")
            try:
                hourly_rate = float(request.form.get("hourly_rate", 0))
                if hourly_rate < 0:
                    raise ValueError("–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
            except (ValueError, TypeError):
                flash("–ù–µ–≤–µ—Ä–Ω–∞—è —á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "error")
                return redirect(url_for("admin_employees"))
            
            employee = Employee.query.get(employee_id)
            if employee:
                employee.hourly_rate = hourly_rate
                db.session.commit()
                flash(f"–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞", "success")
        
        elif action == "deactivate":
            employee_id = request.form.get("employee_id")
            employee = Employee.query.get(employee_id)
            if employee:
                employee.is_active = False
                db.session.commit()
                flash(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee.name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", "success")
        
        return redirect(url_for("admin_employees"))
    
    employees = Employee.query.all()
    return render_template("admin_employees.html", employees=employees)

def calculate_work_hours_data(employees, year=None, month=None):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞–º –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    if year is None:
        year = datetime.now().year
    if month is None:
        month = datetime.now().month
    
    work_hours_data = {}
    
    for employee in employees:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
        start_date = datetime(year, month, 1).date()
        if month == 12:
            end_date = datetime(year + 1, 1, 1).date() - timedelta(days=1)
        else:
            end_date = datetime(year, month + 1, 1).date() - timedelta(days=1)
        
        work_hours = WorkHours.query.filter(
            WorkHours.employee_id == employee.id,
            WorkHours.date >= start_date,
            WorkHours.date <= end_date
        ).all()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞
        first_period_hours = 0.0
        second_period_hours = 0.0
        
        for wh in work_hours:
            if wh.date.day <= 15:
                first_period_hours += wh.hours
            else:
                second_period_hours += wh.hours
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—ã
        first_period_salary = first_period_hours * employee.hourly_rate
        second_period_salary = second_period_hours * employee.hourly_rate
        month_salary = first_period_salary + second_period_salary
        
        work_hours_data[employee.id] = {
            'first_period_hours': first_period_hours,
            'second_period_hours': second_period_hours,
            'first_period_salary': first_period_salary,
            'second_period_salary': second_period_salary,
            'month_salary': month_salary
        }
    
    return work_hours_data

@app.route("/admin/work-hours", methods=["GET", "POST"])
@login_required
def admin_work_hours():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏"""
    if current_user.role != "–ê–¥–º–∏–Ω":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("dashboard"))
    
    try:
        if request.method == "POST":
            action = request.form.get("action")
            
            if action == "add_hours":
                employee_id = request.form.get("employee_id")
                date_str = request.form.get("date")
                try:
                    hours = float(request.form.get("hours", 0))
                    if hours < 0:
                        raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
                except (ValueError, TypeError):
                    flash("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤", "error")
                    return redirect(url_for("admin_work_hours"))
                notes = request.form.get("notes", "")
                
                if employee_id and date_str and hours > 0:
                    try:
                        date = datetime.strptime(date_str, "%Y-%m-%d").date()
                        employee_id_int = int(employee_id)
                        if employee_id_int <= 0:
                            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
                        work_hours = WorkHours(
                            employee_id=employee_id_int,
                            date=date,
                            hours=hours,
                            notes=notes
                        )
                        db.session.add(work_hours)
                        db.session.commit()
                        flash("–†–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã", "success")
                    except ValueError:
                        flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã", "error")
                else:
                    flash("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", "error")
            
            elif action == "bulk_hours":
                # –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤ –∏–∑ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—ã
                employee_id = request.form.get("employee_id")
                month = int(request.form.get("month", 1))
                year = int(request.form.get("year", 2024))
                period_type = request.form.get("period_type", "first")
                notes = request.form.get("notes", "")
                
                if employee_id and month and year:
                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–Ω–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
                        if period_type == "first":
                            start_day, end_day = 1, 15
                        else:
                            start_day, end_day = 16, 31
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
                        days_in_month = (datetime(year, month + 1, 1) - timedelta(days=1)).day
                        end_day = min(end_day, days_in_month)
                        
                        added_count = 0
                        for day in range(start_day, end_day + 1):
                            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                            hours_key = f"hours_{day}"
                            hours_value = request.form.get(hours_key)
                            
                            if hours_value and float(hours_value) > 0:
                                date = datetime(year, month, day).date()
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —á–∞—Å—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                                existing = WorkHours.query.filter_by(
                                    employee_id=int(employee_id),
                                    date=date
                                ).first()
                                
                                if not existing:
                                    work_hours = WorkHours(
                                        employee_id=int(employee_id),
                                        date=date,
                                        hours=float(hours_value),
                                        notes=notes or f"–í–≤–æ–¥ –∑–∞ {day}.{month}.{year}"
                                    )
                                    db.session.add(work_hours)
                                    added_count += 1
                                else:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–∞—Å—ã
                                    existing.hours = float(hours_value)
                                    existing.notes = notes or f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {day}.{month}.{year}"
                                    added_count += 1
                        
                        db.session.commit()
                        flash(f"–†–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã: {added_count} –∑–∞–ø–∏—Å–µ–π", "success")
                    except Exception as e:
                        db.session.rollback()
                        flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤: {str(e)}", "error")
                else:
                    flash("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", "error")
            
            return redirect(url_for("admin_work_hours"))
        
        employees = Employee.query.filter_by(is_active=True).all()
        current_year = datetime.now().year
        current_month = datetime.now().month
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º
        work_hours_data = calculate_work_hours_data(employees, current_year, current_month)
        
        return render_template("admin_work_hours.html", 
                             employees=employees, 
                             current_year=current_year,
                             work_hours_data=work_hours_data or {})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ admin_work_hours: {e}")
        import traceback
        traceback.print_exc()
        flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤", "error")
        return redirect(url_for("dashboard"))

@app.route("/admin/salary-report")
@login_required
def admin_salary_report():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º"""
    if current_user.role != "–ê–¥–º–∏–Ω":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("dashboard"))
    
    try:
        employees = Employee.query.filter_by(is_active=True).all()
        current_year = datetime.now().year
        current_month = datetime.now().month
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º
        work_hours_data = calculate_work_hours_data(employees, current_year, current_month)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        report_data = []
        for employee in employees:
            if employee.id in work_hours_data:
                data = work_hours_data[employee.id]
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
                start_date = datetime(current_year, current_month, 1).date()
                if current_month == 12:
                    end_date = datetime(current_year + 1, 1, 1).date() - timedelta(days=1)
                else:
                    end_date = datetime(current_year, current_month + 1, 1).date() - timedelta(days=1)
                
                daily_hours = WorkHours.query.filter(
                    WorkHours.employee_id == employee.id,
                    WorkHours.date >= start_date,
                    WorkHours.date <= end_date
                ).order_by(WorkHours.date).all()
                
                report_data.append({
                    'employee': employee,
                    'month_hours': data['first_period_hours'] + data['second_period_hours'],
                    'month_salary': data['month_salary'],
                    'daily_hours': daily_hours
                })
    
        return render_template("admin_salary_report.html", 
                             employees=employees,
                             report_data=report_data,
                             work_hours_data=work_hours_data or {})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ admin_salary_report: {e}")
        import traceback
        traceback.print_exc()
        flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º", "error")
        return redirect(url_for("dashboard"))

@app.route("/admin/cleanup_storage", methods=["POST"])
@login_required
def cleanup_storage():
    """–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if current_user.role != "–ê–¥–º–∏–Ω":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("dashboard"))
    
    deleted_count = cleanup_old_orders()
    
    if deleted_count > 0:
        flash(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {deleted_count}")
    else:
        flash("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –Ω–æ—Ä–º–µ")
    
    return redirect(url_for("dashboard"))

@app.route("/mail")
@login_required
def mail_agent():
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Å—Ç–∏–ª–µ macOS"""
    if current_user.role != "–ú–µ–Ω–µ–¥–∂–µ—Ä":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("dashboard"))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (inbox, sent, compose)
    view_type = request.args.get('view', 'inbox')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞
    inbox_emails = Email.query.filter_by(is_sent=False).order_by(Email.created_at.desc()).limit(50).all()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞
    sent_emails = Email.query.filter_by(is_sent=True).order_by(Email.sent_at.desc()).limit(50).all()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    unread_count = Email.query.filter_by(is_sent=False, is_read=False).count()
    total_inbox = Email.query.filter_by(is_sent=False).count()
    total_sent = Email.query.filter_by(is_sent=True).count()
    
    return render_template("mail_agent.html", 
                         view_type=view_type,
                         inbox_emails=inbox_emails,
                         sent_emails=sent_emails,
                         unread_count=unread_count,
                         total_inbox=total_inbox,
                         total_sent=total_sent,
                         datetime=datetime)

@app.route("/mail/fetch")
@login_required
def fetch_emails():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º"""
    if current_user.role != "–ú–µ–Ω–µ–¥–∂–µ—Ä":
        return jsonify({"success": False, "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}), 403
    
    try:
        new_emails = fetch_incoming_emails()
        return jsonify({
            "success": True, 
            "message": f"–ü–æ–ª—É—á–µ–Ω–æ {len(new_emails)} –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º",
            "count": len(new_emails)
        })
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"}), 500

@app.route("/mail/read/<int:email_id>")
@login_required
def read_email(email_id):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∏—Å—å–º–∞"""
    if current_user.role != "–ú–µ–Ω–µ–¥–∂–µ—Ä":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("mail_agent"))
    
    email_obj = Email.query.get_or_404(email_id)
    
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    if not email_obj.is_read:
        email_obj.is_read = True
        db.session.commit()
    
    return render_template("email_view.html", email=email_obj, datetime=datetime)

@app.route("/mail/reply/<int:email_id>", methods=["GET", "POST"])
@login_required
def reply_email(email_id):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ø–∏—Å—å–º–æ"""
    if current_user.role != "–ú–µ–Ω–µ–¥–∂–µ—Ä":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("mail_agent"))
    
    original_email = Email.query.get_or_404(email_id)
    
    if request.method == "POST":
        subject = request.form.get("subject")
        body = request.form.get("body")
        
        if not all([subject, body]):
            flash("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", "error")
            return redirect(url_for("reply_email", email_id=email_id))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if send_email_with_storage(
            to_email=original_email.sender,
            subject=subject,
            body=body,
            reply_to_id=email_id
        ):
            flash("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", "success")
        else:
            flash("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞", "error")
        
        return redirect(url_for("mail_agent"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–º—É –æ—Ç–≤–µ—Ç–∞
    reply_subject = f"Re: {original_email.subject}" if not original_email.subject.startswith("Re:") else original_email.subject
    
    return render_template("email_reply.html", 
                         original_email=original_email,
                         reply_subject=reply_subject,
                         datetime=datetime)

@app.route("/mail/compose", methods=["GET", "POST"])
@login_required
def compose_email():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞"""
    if current_user.role != "–ú–µ–Ω–µ–¥–∂–µ—Ä":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("mail_agent"))
    
    if request.method == "POST":
        to_email = request.form.get("to_email")
        subject = request.form.get("subject")
        body = request.form.get("body")
        
        if not all([to_email, subject, body]):
            flash("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", "error")
            return redirect(url_for("compose_email"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        if send_email_with_storage(
            to_email=to_email,
            subject=subject,
            body=body
        ):
            flash("‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "success")
            return redirect(url_for("mail_agent", view="sent"))
        else:
            flash("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞", "error")
    
    return render_template("email_compose.html", datetime=datetime)

@app.route("/mail/send_notification/<int:order_id>", methods=["POST"])
@login_required
def send_order_notification_route(order_id):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞"""
    if current_user.role != "–ú–µ–Ω–µ–¥–∂–µ—Ä":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("dashboard"))
    
    order = Order.query.get_or_404(order_id)
    
    if send_order_notification(order, "ready"):
        flash(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {order.client}", "success")
    else:
        flash("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "error")
    
    return redirect(url_for("mail_agent"))

@app.route("/mail/ship_order/<int:order_id>", methods=["POST"])
@login_required
def ship_order(order_id):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"""
    if current_user.role != "–ú–µ–Ω–µ–¥–∂–µ—Ä":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("dashboard"))
    
    order = Order.query.get_or_404(order_id)
    order.shipment = True
    db.session.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    send_order_notification(order, "shipped")
    
    flash(f"‚úÖ –ó–∞–∫–∞–∑ {order.order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π", "success")
    return redirect(url_for("mail_agent"))

@app.route("/mail/send_custom", methods=["POST"])
@login_required
def send_custom_email():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ email"""
    if current_user.role != "–ú–µ–Ω–µ–¥–∂–µ—Ä":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("dashboard"))
    
    to_email = request.form.get("to_email")
    subject = request.form.get("subject")
    message = request.form.get("message")
    
    if not all([to_email, subject, message]):
        flash("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", "error")
        return redirect(url_for("mail_agent"))
    
    try:
        msg = Message(
            subject=subject,
            recipients=[to_email],
            body=message,
            sender=app.config['MAIL_DEFAULT_SENDER']
        )
        mail.send(msg)
        flash(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}", "success")
    except Exception as e:
        flash(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}", "error")
    
    return redirect(url_for("mail_agent"))

@app.cli.command("init-db")
def init_db():
    db.create_all()
    users = [
        {"username": "admin", "password": "admin123", "role": "–ê–¥–º–∏–Ω"},
        {"username": "manager", "password": "5678", "role": "–ú–µ–Ω–µ–¥–∂–µ—Ä"},
        {"username": "worker", "password": "0000", "role": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"},
        {"username": "cutter", "password": "7777", "role": "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞"},
        {"username": "polisher", "password": "8888", "role": "–®–ª–∏—Ñ–æ–≤–∫–∞"},
        {"username": "monitor", "password": "9999", "role": "–ú–æ–Ω–∏—Ç–æ—Ä"}
    ]

    for u in users:
        if not User.query.filter_by(username=u["username"]).first():
            db.session.add(User(
                username=u["username"],
                password=generate_password_hash(u["password"]),
                role=u["role"]
            ))
    db.session.commit()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000)
