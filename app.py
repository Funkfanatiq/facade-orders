from flask import Flask, render_template, redirect, url_for, request, flash, session, jsonify, send_from_directory 
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from flask_migrate import Migrate
from datetime import datetime, timedelta, timezone
import os
from dotenv import load_dotenv

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
URGENT_DAYS_THRESHOLD = 3  # –î–Ω–µ–π –¥–æ —Å—Ä–æ–∫–∞ –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
SHEET_AREA = 2.75 * 2.05  # –ü–ª–æ—â–∞–¥—å –ª–∏—Å—Ç–∞ –≤ –º¬≤ (5.6375)
MAX_FILE_SIZE = 16 * 1024 * 1024  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (16MB)
EXPIRED_DAYS = 180  # –î–Ω–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
STORAGE_LIMIT_MB = 980  # –õ–∏–º–∏—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ú–ë
ORDER_SIZE_MB = 10  # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ –ú–ë
CLEANUP_BATCH_SIZE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ —Ä–∞–∑

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
ALLOWED_EXTENSIONS = {'pdf', 'png', 'jpg', 'jpeg', 'gif', 'txt', 'doc', 'docx', 'xls', 'xlsx', 'dwg', 'dxf'}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

app = Flask(__name__)
app.config.from_object('config.Config')


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Flask
from models import db, User, Order, Employee, WorkHours, SalaryPeriod
db.init_app(app)
migrate = Migrate(app, db)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "login"

os.makedirs(app.config["UPLOAD_FOLDER"], exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with app.app_context():
        try:
            print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            db.create_all()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_count = User.query.count()
            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {user_count}")
            
            if user_count == 0:
                print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
                
                # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                manager = User(
                    username='manager',
                    password=User.hash_password('5678'),
                    role='–ú–µ–Ω–µ–¥–∂–µ—Ä'
                )
                db.session.add(manager)
                
                # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
                admin = User(
                    username='admin',
                    password=User.hash_password('admin123'),
                    role='–ê–¥–º–∏–Ω'
                )
                db.session.add(admin)
                
                # –°–æ–∑–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users_data = [
                    ('worker', '0000', '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ'),
                    ('cutter', '7777', '–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞'),
                    ('polisher', '8888', '–®–ª–∏—Ñ–æ–≤–∫–∞'),
                    ('monitor', '9999', '–ú–æ–Ω–∏—Ç–æ—Ä')
                ]
                
                for username, password, role in users_data:
                    user = User(
                        username=username,
                        password=User.hash_password(password),
                        role=role
                    )
                    db.session.add(user)
                
                db.session.commit()
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
            else:
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            
            print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()

# –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
init_database()

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def secure_filename_custom(filename):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    import re
    # –£–¥–∞–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    filename = re.sub(r'[^\w\-_\.]', '_', filename)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(filename) > 100:
        name, ext = os.path.splitext(filename)
        filename = name[:95] + ext
    return filename

def get_storage_usage_mb():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ú–ë"""
    try:
        upload_folder = app.config["UPLOAD_FOLDER"]
        total_size = 0
        
        for dirpath, dirnames, filenames in os.walk(upload_folder):
            for filename in filenames:
                filepath = os.path.join(dirpath, filename)
                if os.path.exists(filepath):
                    total_size += os.path.getsize(filepath)
        
        return total_size / (1024 * 1024)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–ë
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
        return 0

def cleanup_old_orders():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    try:
        current_usage = get_storage_usage_mb()
        print(f"üìä –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {current_usage:.2f} –ú–ë")
        
        if current_usage >= STORAGE_LIMIT_MB:
            print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ({STORAGE_LIMIT_MB} –ú–ë). –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É...")
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" (shipment = True)
            old_orders = Order.query.filter_by(shipment=True).order_by(Order.due_date.asc()).limit(CLEANUP_BATCH_SIZE).all()
            
            if old_orders:
                deleted_count = 0
                for order in old_orders:
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∑–∞–∫–∞–∑–∞
                    if order.filepaths:
                        file_paths = order.filepaths.split(';')
                        for file_path in file_paths:
                            if file_path.strip():
                                full_path = os.path.join(app.config["UPLOAD_FOLDER"], file_path.strip())
                                if os.path.exists(full_path):
                                    try:
                                        os.remove(full_path)
                                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                                    except Exception as e:
                                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    db.session.delete(order)
                    deleted_count += 1
                
                db.session.commit()
                
                new_usage = get_storage_usage_mb()
                freed_space = current_usage - new_usage
                
                print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {deleted_count}")
                print(f"üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {freed_space:.2f} –ú–ë")
                print(f"üìä –ù–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {new_usage:.2f} –ú–ë")
                
                return deleted_count
            else:
                print("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return 0
        else:
            print(f"‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –Ω–æ—Ä–º–µ: {current_usage:.2f} –ú–ë / {STORAGE_LIMIT_MB} –ú–ë")
            return 0
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
        import traceback
        traceback.print_exc()
        return 0

@app.template_filter("zip")
def zip_filter(a, b):
    return zip(a, b)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.before_request
def clear_session_if_not_logged_in():
    if not current_user.is_authenticated:
        session.clear()

def is_urgent_order(order):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ —Å—Ä–æ—á–Ω—ã–º.
    –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã: –æ—Å—Ç–∞–ª–æ—Å—å URGENT_DAYS_THRESHOLD –¥–Ω–µ–π –∏–ª–∏ –º–µ–Ω—å—à–µ –¥–æ —Å—Ä–æ–∫–∞ —Å–¥–∞—á–∏.
    """
    days_left = (order.due_date - datetime.now(timezone.utc).date()).days
    return days_left <= URGENT_DAYS_THRESHOLD

def generate_daily_pool():
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–ª –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∫–∏:
    1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ä–æ—á–Ω—ã–º –∑–∞–∫–∞–∑–∞–º (–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é)
    2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ª–∏—Å—Ç–æ–≤ –ú–î–§
    3. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É —Ñ–∞—Å–∞–¥–∞
    4. –õ–∏—Å—Ç –ú–î–§: 2750√ó2050 = 5.6375 –º¬≤
    """
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ú–î–§ –ª–∏—Å—Ç–∞ 2750√ó2050 –º–º
    SHEET_AREA = 2.75 * 2.05  # 5.6375 –º¬≤
    MAX_SHEET_COUNT = 4
    LARGE_ORDER_THRESHOLD = SHEET_AREA * MAX_SHEET_COUNT  # 22.55 –º¬≤
    OPTIMAL_UTILIZATION = 0.85  # 85% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∏–º
    ACCEPTABLE_WASTE = 0.3  # –î–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤ –º¬≤

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞—Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    candidates = Order.query.filter(
        Order.milling == False,
        Order.shipment == False,
        Order.area != None,
        Order.area > 0
    ).order_by(Order.due_date.asc()).all()

    if not candidates:
        return []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    urgent_orders = [o for o in candidates if is_urgent_order(o)]
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã - –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Å—Ä–æ—á–Ω—ã–π, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    if urgent_orders:
        urgent_order = urgent_orders[0]
        # –ï—Å–ª–∏ —Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π - –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–ª
        if urgent_order.area >= LARGE_ORDER_THRESHOLD:
            return [urgent_order]
        
        # –î–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ –¥–æ 4 –ª–∏—Å—Ç–æ–≤
        same_type_urgent = [o for o in urgent_orders if o.facade_type == urgent_order.facade_type]
        pool = []
        total_area = 0
        
        for order in same_type_urgent:
            if total_area + order.area <= LARGE_ORDER_THRESHOLD:
                pool.append(order)
                total_area += order.area
            else:
                break
        
        return pool

    # –û–±—ã—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–µ—Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    first_order = candidates[0]
    target_facade_type = first_order.facade_type

    # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π (>4 –ª–∏—Å—Ç–æ–≤) - –¥–µ–ª–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–ª
    if first_order.area >= LARGE_ORDER_THRESHOLD:
        return [first_order]

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
    same_type_orders = [o for o in candidates if o.facade_type == target_facade_type]
    
    # –ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: –∏—â–µ–º –ª—É—á—à—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤
    best_combination = find_optimal_combination(same_type_orders, SHEET_AREA, MAX_SHEET_COUNT)
    
    return best_combination if best_combination else [first_order]

def find_optimal_combination(orders, sheet_area, max_sheets):
    """
    –ò—â–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∂–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
    """
    max_total_area = sheet_area * max_sheets
    best_combination = []
    best_efficiency = 0
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –∑–∞–∫–∞–∑–∞
    combination1 = pack_orders_greedy(orders, max_total_area, sort_by='area_desc')
    efficiency1 = calculate_efficiency(combination1, sheet_area)
    
    if efficiency1 > best_efficiency:
        best_combination = combination1
        best_efficiency = efficiency1
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º—ã—Ö —Å—Ä–æ—á–Ω—ã—Ö
    combination2 = pack_orders_greedy(orders, max_total_area, sort_by='due_date')
    efficiency2 = calculate_efficiency(combination2, sheet_area)
    
    if efficiency2 > best_efficiency:
        best_combination = combination2
        best_efficiency = efficiency2
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è - –∏—â–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–æ –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞
    combination3 = pack_orders_complementary(orders, max_total_area, sheet_area)
    efficiency3 = calculate_efficiency(combination3, sheet_area)
    
    if efficiency3 > best_efficiency:
        best_combination = combination3
        best_efficiency = efficiency3
    
    return best_combination

def pack_orders_greedy(orders, max_area, sort_by='area_desc'):
    """–ñ–∞–¥–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    if sort_by == 'area_desc':
        sorted_orders = sorted(orders, key=lambda x: x.area, reverse=True)
    elif sort_by == 'due_date':
        sorted_orders = sorted(orders, key=lambda x: x.due_date)
    else:
        sorted_orders = orders[:]
    
    combination = []
    total_area = 0
    
    for order in sorted_orders:
        if total_area + order.area <= max_area:
            combination.append(order)
            total_area += order.area
    
    return combination

def pack_orders_complementary(orders, max_area, sheet_area):
    """
    –ò—â–µ—Ç –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–æ –∫–æ–º–±–∏–Ω–∏—Ä—É—é—Ç—Å—è –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
    """
    if not orders:
        return []
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (—Å–∞–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
    combination = [orders[0]]
    total_area = orders[0].area
    remaining_orders = orders[1:]
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–æ –¥–æ–ø–æ–ª–Ω—è—é—Ç —Ç–µ–∫—É—â—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    while remaining_orders and total_area < max_area:
        best_fit = None
        best_waste = float('inf')
        
        for order in remaining_orders:
            if total_area + order.area <= max_area:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
                new_total = total_area + order.area
                sheets_needed = (new_total / sheet_area)
                full_sheets = int(sheets_needed)
                
                if sheets_needed == full_sheets:
                    waste = 0  # –ò–¥–µ–∞–ª—å–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
                else:
                    waste = sheet_area - (new_total - full_sheets * sheet_area)
                
                # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
                if waste < best_waste:
                    best_waste = waste
                    best_fit = order
        
        if best_fit:
            combination.append(best_fit)
            total_area += best_fit.area
            remaining_orders.remove(best_fit)
        else:
            break
    
    return combination

def calculate_efficiency(combination, sheet_area):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    """
    if not combination:
        return 0
    
    total_area = sum(order.area for order in combination)
    sheets_needed = total_area / sheet_area
    full_sheets = int(sheets_needed)
    
    if sheets_needed == full_sheets:
        # –ò–¥–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        return 1.0
    else:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–∏—Å—Ç–∞
        partial_sheet_usage = (total_area - full_sheets * sheet_area) / sheet_area
        # –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if full_sheets > 0:
            return (full_sheets + partial_sheet_usage) / (full_sheets + 1)
        else:
            return partial_sheet_usage



@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        user = User.query.filter_by(username=username).first()

        if user and check_password_hash(user.password, password):
            login_user(user)
            if user.role == "–ú–æ–Ω–∏—Ç–æ—Ä":
                return redirect(url_for("monitor"))
            elif user.role == "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
                return redirect(url_for("milling_station"))
            elif user.role == "–®–ª–∏—Ñ–æ–≤–∫–∞":
                return redirect(url_for("polishing_station"))
            return redirect(url_for("dashboard"))

        flash("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    return render_template("login.html")

@app.route("/logout")
@login_required
def logout():
    logout_user()
    return redirect(url_for("login"))

@app.route("/", methods=["GET", "POST"])
@login_required
def dashboard():
    if current_user.role == "–ú–æ–Ω–∏—Ç–æ—Ä":
        return redirect(url_for("monitor"))
    if current_user.role == "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
        return redirect(url_for("milling_station"))
    if current_user.role == "–®–ª–∏—Ñ–æ–≤–∫–∞":
        return redirect(url_for("polishing_station"))
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if current_user.role == "–ê–¥–º–∏–Ω":
        return render_admin_dashboard()

    cutoff = datetime.now(timezone.utc).date() - timedelta(days=EXPIRED_DAYS)
    expired = Order.query.filter(Order.shipment == True, Order.due_date < cutoff).all()

    for o in expired:
        if o.filepaths:
            for path in o.filepaths.split(";"):
                try:
                    os.remove(os.path.join("static", path))
                except (FileNotFoundError, OSError) as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {path}: {e}")
        db.session.delete(o)

    if expired:
        db.session.commit()
        flash(f"üßπ –£–¥–∞–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(expired)}")

    if request.method == "POST" and current_user.role == "–ú–µ–Ω–µ–¥–∂–µ—Ä":
        order_id = request.form["order_id"]
        client = request.form["client"]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            days = int(request.form["days"])
            if days <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except (ValueError, KeyError):
            flash("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π", "error")
            return redirect(url_for("dashboard"))
        
        facade_type = request.form.get("facade_type") or None
        area = request.form.get("area")
        
        try:
            area = float(area) if area else None
            if area is not None and area <= 0:
                raise ValueError("–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            flash("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å", "error")
            return redirect(url_for("dashboard"))
        
        due_date = datetime.now(timezone.utc).date() + timedelta(days=days)

        uploaded_files = request.files.getlist("files")
        filenames = []
        filepaths = []

        for f in uploaded_files:
            if f and f.filename:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                if not allowed_file(f.filename):
                    flash(f"–§–∞–π–ª {f.filename} –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø", "error")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                f.seek(0, 2)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                file_size = f.tell()
                f.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
                
                if file_size > MAX_FILE_SIZE:
                    flash(f"–§–∞–π–ª {f.filename} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º {MAX_FILE_SIZE // (1024*1024)}MB)", "error")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                safe_filename = secure_filename_custom(f.filename)
                filenames.append(safe_filename)
                path = os.path.join(app.config["UPLOAD_FOLDER"], safe_filename)
                f.save(path)
                filepaths.append(os.path.relpath(path, start="static"))

        order = Order(
            order_id=order_id,
            client=client,
            days=days,
            due_date=due_date,
            milling=False,
            packaging=False,
            shipment=False,
            paid=False,
            filenames=";".join(filenames),
            filepaths=";".join(filepaths),
            facade_type=facade_type,
            area=area
        )

        db.session.add(order)
        db.session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        cleanup_old_orders()
        
        flash("‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω!")
        return redirect(url_for("dashboard"))

    # –î–ª—è —Ä–æ–ª–∏ "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ—Å–ª–µ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∫–∏ –∏ —à–ª–∏—Ñ–æ–≤–∫–∏
    if current_user.role == "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ":
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∫—É –∏ —à–ª–∏—Ñ–æ–≤–∫—É
        orders = Order.query.filter(
            Order.milling == True,
            Order.polishing_1 == True,
            Order.shipment == False
        ).order_by(
            # –°–Ω–∞—á–∞–ª–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–±–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏), –∑–∞—Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
            Order.packaging.asc(),
            Order.due_date.asc()
        ).all()
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
        orders = Order.query.order_by(Order.due_date).all()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    storage_usage = get_storage_usage_mb()
    storage_info = {
        'current_mb': round(storage_usage, 2),
        'limit_mb': STORAGE_LIMIT_MB,
        'percentage': round((storage_usage / STORAGE_LIMIT_MB) * 100, 1)
    }
    
    return render_template("dashboard.html", orders=orders, datetime=datetime, storage_info=storage_info)

def render_admin_dashboard():
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if request.method == "POST":
        order_id = request.form["order_id"]
        client = request.form["client"]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            days = int(request.form["days"])
            if days <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except (ValueError, KeyError):
            flash("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π", "error")
            return redirect(url_for("edit_order", order_id=order_id))
        
        facade_type = request.form.get("facade_type") or None
        area = request.form.get("area")
        
        try:
            area = float(area) if area else None
            if area is not None and area <= 0:
                raise ValueError("–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            flash("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å", "error")
            return redirect(url_for("edit_order", order_id=order_id))
        
        due_date = datetime.now(timezone.utc).date() + timedelta(days=days)

        order = Order(
            order_id=order_id,
            client=client,
            days=days,
            due_date=due_date,
            milling=False,
            packaging=False,
            shipment=False,
            paid=False,
            filenames="",
            filepaths="",
            facade_type=facade_type,
            area=area
        )

        db.session.add(order)
        db.session.commit()
        flash("‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω!")
        return redirect(url_for("dashboard"))

    orders = Order.query.order_by(Order.due_date).all()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    storage_usage = get_storage_usage_mb()
    storage_info = {
        'current_mb': round(storage_usage, 2),
        'limit_mb': STORAGE_LIMIT_MB,
        'percentage': round((storage_usage / STORAGE_LIMIT_MB) * 100, 1)
    }
    
    return render_template("admin_dashboard.html", orders=orders, datetime=datetime, current_user=current_user, storage_info=storage_info)

@app.route("/delete_order/<int:order_id>", methods=["DELETE"])
@login_required
def delete_order(order_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)"""
    if current_user.role not in ["–ê–¥–º–∏–Ω", "–ú–µ–Ω–µ–¥–∂–µ—Ä"]:
        return jsonify({"success": False, "message": "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}), 403
    
    try:
        order = Order.query.get_or_404(order_id)
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if order.filepaths:
            for path in order.filepaths.split(";"):
                try:
                    os.remove(os.path.join("static", path))
                except (FileNotFoundError, OSError) as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {path}: {e}")
        
        db.session.delete(order)
        db.session.commit()
        
        return jsonify({"success": True, "message": "‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω"})
    except Exception as e:
        db.session.rollback()
        return jsonify({"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"}), 500

@app.route("/update_status/<int:order_id>", methods=["POST"])
@login_required
def update_status(order_id):
    if current_user.role not in ["–ê–¥–º–∏–Ω", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞", "–®–ª–∏—Ñ–æ–≤–∫–∞"]:
        return "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", 403

    order = Order.query.get_or_404(order_id)
    form = request.form

    order.milling = form.get("milling") == "1"
    order.polishing_1 = form.get("polishing_1") == "1"
    order.packaging = form.get("packaging") == "1"
    order.shipment = form.get("shipment") == "1"
    order.paid = form.get("paid") == "1"

    db.session.commit()
    return "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", 200

@app.route("/update_stage", methods=["POST"])
@login_required
def update_stage():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ (–¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —à–ª–∏—Ñ–æ–≤–∫–∏)"""
    if current_user.role not in ["–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞", "–®–ª–∏—Ñ–æ–≤–∫–∞"]:
        return "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", 403

    data = request.get_json()
    order_id = data.get("order_id")
    field_name = data.get("field_name")
    value = data.get("value")

    if not all([order_id, field_name is not None, value is not None]):
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", 400

    order = Order.query.get_or_404(order_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–Ω–æ –µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å
    allowed_fields = ["polishing_1", "milling", "packaging", "shipment", "paid"]
    if field_name not in allowed_fields:
        return "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–æ–ª–µ", 400

    setattr(order, field_name, value)
    db.session.commit()
    
    return "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", 200

@app.route("/monitor")
@login_required
def monitor():
    if current_user.role != "–ú–æ–Ω–∏—Ç–æ—Ä":
        return redirect(url_for("dashboard"))

    orders = Order.query.filter(Order.milling == True, Order.shipment == False).order_by(Order.due_date).all()
    return render_template("monitor.html", orders=orders, datetime=datetime)

@app.route("/milling", methods=["GET", "POST"])
@login_required
def milling_station():
    if current_user.role != "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
        return redirect(url_for("dashboard"))

    pool = generate_daily_pool()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    pool_info = {
        'is_urgent': any(is_urgent_order(order) for order in pool) if pool else False,
        'efficiency': 0,
        'waste': 0
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_urgency = {}
    for order in pool:
        days_left = (order.due_date - datetime.now(timezone.utc).date()).days
        order_urgency[order.id] = {
            'is_urgent': is_urgent_order(order),
            'days_left': days_left
        }
    
    if pool:
        total_area = sum(order.area for order in pool)
        sheet_area = SHEET_AREA
        sheets_needed = total_area / sheet_area
        full_sheets = int(sheets_needed)
        partial_sheet = sheets_needed - full_sheets
        
        if partial_sheet > 0:
            pool_info['waste'] = sheet_area - (total_area - full_sheets * sheet_area)
            pool_info['efficiency'] = (total_area / ((full_sheets + 1) * sheet_area)) * 100
        else:
            pool_info['waste'] = 0
            pool_info['efficiency'] = 100
    
    return render_template("milling.html", orders=pool, pool_info=pool_info, order_urgency=order_urgency)

@app.route("/mark_pool_complete", methods=["POST"])
@login_required
def mark_pool_complete():
    if current_user.role != "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
        return "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", 403

    pool = generate_daily_pool()
    for order in pool:
        order.milling = True

    db.session.commit()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –æ—Ç–≤–µ—Ç –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
    if request.headers.get('Content-Type') == 'application/json':
        return {"success": True, "message": "‚úÖ –ü—É–ª –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω"}
    
    flash("‚úÖ –ü—É–ª –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω. –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π...")
    return redirect(url_for("milling_station"))

@app.route("/milling-pool")
@login_required
def milling_pool():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É–ª–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ñ—Ä–µ–∑–µ—Ä–æ–≤—â–∏–∫–∞"""
    if current_user.role != "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
        return redirect(url_for("dashboard"))

    pool = generate_daily_pool()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    pool_info = {
        'is_urgent': any(is_urgent_order(order) for order in pool) if pool else False,
        'efficiency': 0,
        'waste': 0
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_urgency = {}
    for order in pool:
        days_left = (order.due_date - datetime.now(timezone.utc).date()).days
        order_urgency[order.id] = {
            'is_urgent': is_urgent_order(order),
            'days_left': days_left
        }
    
    if pool:
        total_area = sum(order.area for order in pool)
        sheet_area = SHEET_AREA
        sheets_needed = total_area / sheet_area
        full_sheets = int(sheets_needed)
        partial_sheet = sheets_needed - full_sheets
        
        if partial_sheet > 0:
            pool_info['waste'] = sheet_area - (total_area - full_sheets * sheet_area)
            pool_info['efficiency'] = (total_area / ((full_sheets + 1) * sheet_area)) * 100
        else:
            pool_info['waste'] = 0
            pool_info['efficiency'] = 100
    
    return render_template("milling_pool.html", orders=pool, pool_info=pool_info, order_urgency=order_urgency)

@app.route("/milling-orders")
@login_required
def milling_orders():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ –¥–ª—è —Ñ—Ä–µ–∑–µ—Ä–æ–≤—â–∏–∫–∞"""
    if current_user.role != "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
        return redirect(url_for("dashboard"))

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    orders = Order.query.filter(Order.shipment == False).order_by(Order.due_date.asc()).all()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É–ª
    current_pool = generate_daily_pool()
    pool_order_ids = [order.id for order in current_pool]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_urgency = {}
    for order in orders:
        days_left = (order.due_date - datetime.now(timezone.utc).date()).days
        order_urgency[order.id] = {
            'is_urgent': is_urgent_order(order),
            'days_left': days_left
        }
    
    return render_template("milling_orders.html", 
                         orders=orders, 
                         current_pool=current_pool,
                         pool_order_ids=pool_order_ids,
                         order_urgency=order_urgency)

@app.route("/update_milling_manual", methods=["POST"])
@login_required
def update_milling_manual():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∫–∏ —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º –ø—É–ª–∞"""
    if current_user.role != "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞":
        return jsonify({"success": False, "message": "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}), 403
    
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "message": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400
            
        order_id = data.get('order_id')
        status = data.get('status')
        
        if order_id is None or status is None:
            return jsonify({"success": False, "message": "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"}), 400
        
        order = Order.query.get(order_id)
        if not order:
            return jsonify({"success": False, "message": "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        order.milling = status
        db.session.commit()
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—É–ª –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        new_pool = generate_daily_pool()
        pool_info = {
            'is_urgent': any(is_urgent_order(order) for order in new_pool) if new_pool else False,
            'efficiency': 0,
            'waste': 0
        }
        
        if new_pool:
            total_area = sum(order.area for order in new_pool)
            sheet_area = SHEET_AREA
            sheets_needed = total_area / sheet_area
            full_sheets = int(sheets_needed)
            partial_sheet = sheets_needed - full_sheets
            
            if partial_sheet > 0:
                pool_info['waste'] = sheet_area - (total_area - full_sheets * sheet_area)
                pool_info['efficiency'] = (total_area / ((full_sheets + 1) * sheet_area)) * 100
            else:
                pool_info['waste'] = 0
                pool_info['efficiency'] = 100
        
        return jsonify({
            'success': True,
            'message': f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order.order_id} –æ–±–Ω–æ–≤–ª–µ–Ω",
            'new_pool': [
                {
                    'id': o.id,
                    'order_id': o.order_id,
                    'client': o.client,
                    'area': o.area,
                    'facade_type': o.facade_type,
                    'due_date': o.due_date.strftime('%Y-%m-%d'),
                    'is_urgent': is_urgent_order(o)
                } for o in new_pool
            ],
            'pool_info': pool_info
        })
    except Exception as e:
        db.session.rollback()
        return jsonify({"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500
@app.route("/update_polishing", methods=["POST"])
@login_required
def update_polishing():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —à–ª–∏—Ñ–æ–≤–∫–∏"""
    if current_user.role not in ["–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞", "–®–ª–∏—Ñ–æ–≤–∫–∞"]:
        return jsonify({"success": False, "message": "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}), 403
    
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "message": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400
            
        order_id = data.get('order_id')
        status = data.get('status')
        
        if order_id is None or status is None:
            return jsonify({"success": False, "message": "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"}), 400
        
        order = Order.query.get(order_id)
        if not order:
            return jsonify({"success": False, "message": "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        order.polishing_1 = status
        db.session.commit()
        
        return jsonify({
            'success': True,
            'message': f"‚úÖ –°—Ç–∞—Ç—É—Å —à–ª–∏—Ñ–æ–≤–∫–∏ –∑–∞–∫–∞–∑–∞ {order.order_id} –æ–±–Ω–æ–≤–ª–µ–Ω"
        })
    except Exception as e:
        db.session.rollback()
        return jsonify({"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

@app.route("/polishing")
@login_required
def polishing_station():
    if current_user.role not in ["–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞", "–®–ª–∏—Ñ–æ–≤–∫–∞"]:
        return redirect(url_for("dashboard"))

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ —à–ø–æ–Ω (—à–ø–æ–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —à–ª–∏—Ñ–æ–≤–∫–∏)
    orders = Order.query.filter(
        Order.milling == True,
        Order.facade_type != "—à–ø–æ–Ω",
        Order.shipment == False
    ).order_by(Order.due_date.asc()).all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_urgency = {}
    for order in orders:
        days_left = (order.due_date - datetime.now(timezone.utc).date()).days
        order_urgency[order.id] = {
            'is_urgent': is_urgent_order(order),
            'days_left': days_left
        }
    
    return render_template("polishing.html", orders=orders, order_urgency=order_urgency)

@app.route("/packaging")
@login_required
def packaging_station():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø–∞–∫–æ–≤–∫–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã –ø–æ—Å–ª–µ —à–ª–∏—Ñ–æ–≤–∫–∏"""
    if current_user.role not in ["–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞", "–®–ª–∏—Ñ–æ–≤–∫–∞"]:
        return redirect(url_for("dashboard"))

    # –ó–∞–∫–∞–∑—ã –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø–∞–∫–æ–≤–∫–µ: –ø—Ä–æ—à–ª–∏ —à–ª–∏—Ñ–æ–≤–∫—É –∏ –Ω–µ –æ—Ç–≥—Ä—É–∂–µ–Ω—ã
    orders = Order.query.filter(
        Order.polishing_1 == True,
        Order.shipment == False
    ).order_by(Order.due_date.asc()).all()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (–¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å—Ä–æ–∫–æ–≤)
    order_urgency = {}
    for order in orders:
        days_left = (order.due_date - datetime.now(timezone.utc).date()).days
        order_urgency[order.id] = {
            'is_urgent': is_urgent_order(order),
            'days_left': days_left
        }

    return render_template("packaging.html", orders=orders, order_urgency=order_urgency)

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

@app.route("/admin/salary")
@login_required
def admin_salary():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    if current_user.role != "–ê–¥–º–∏–Ω":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("dashboard"))
    
    try:
        employees = Employee.query.filter_by(is_active=True).all()
        return render_template("admin_salary.html", employees=employees)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ admin_salary: {e}")
        flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞—Ä–ø–ª–∞—Ç", "error")
        return redirect(url_for("dashboard"))

@app.route("/admin/employees", methods=["GET", "POST"])
@login_required
def admin_employees():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
    if current_user.role != "–ê–¥–º–∏–Ω":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("dashboard"))
    
    if request.method == "POST":
        action = request.form.get("action")
        
        if action == "add_employee":
            name = request.form.get("name")
            position = request.form.get("position")
            try:
                hourly_rate = float(request.form.get("hourly_rate", 0))
                if hourly_rate < 0:
                    raise ValueError("–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
            except (ValueError, TypeError):
                flash("–ù–µ–≤–µ—Ä–Ω–∞—è —á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "error")
                return redirect(url_for("admin_employees"))
            
            if name and position:
                employee = Employee(
                    name=name,
                    position=position,
                    hourly_rate=hourly_rate
                )
                db.session.add(employee)
                db.session.commit()
                flash(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} –¥–æ–±–∞–≤–ª–µ–Ω", "success")
            else:
                flash("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", "error")
        
        elif action == "update_employee":
            employee_id = request.form.get("employee_id")
            try:
                hourly_rate = float(request.form.get("hourly_rate", 0))
                if hourly_rate < 0:
                    raise ValueError("–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
            except (ValueError, TypeError):
                flash("–ù–µ–≤–µ—Ä–Ω–∞—è —á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "error")
                return redirect(url_for("admin_employees"))
            
            employee = Employee.query.get(employee_id)
            if employee:
                employee.hourly_rate = hourly_rate
                db.session.commit()
                flash(f"–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞", "success")
        
        elif action == "deactivate":
            employee_id = request.form.get("employee_id")
            employee = Employee.query.get(employee_id)
            if employee:
                employee.is_active = False
                db.session.commit()
                flash(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee.name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", "success")
        
        return redirect(url_for("admin_employees"))
    
    employees = Employee.query.all()
    return render_template("admin_employees.html", employees=employees)


@app.route("/admin/work-hours", methods=["GET", "POST"])
@login_required
def admin_work_hours():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏"""
    if current_user.role != "–ê–¥–º–∏–Ω":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("dashboard"))
    
    try:
        if request.method == "POST":
            employee_id = request.form.get("employee_id")
            date_str = request.form.get("date")
            try:
                hours = float(request.form.get("hours", 0))
                if hours < 0:
                    raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            except (ValueError, TypeError):
                flash("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤", "error")
                return redirect(url_for("admin_work_hours"))
            notes = request.form.get("notes", "")
            
            if employee_id and date_str and hours > 0:
                try:
                    date = datetime.strptime(date_str, "%Y-%m-%d").date()
                    employee_id_int = int(employee_id)
                    if employee_id_int <= 0:
                        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —á–∞—Å—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                    existing = WorkHours.query.filter_by(
                        employee_id=employee_id_int,
                        date=date
                    ).first()
                    
                    if existing:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–∞—Å—ã
                        existing.hours = hours
                        existing.notes = notes
                        flash("–†–∞–±–æ—á–∏–µ —á–∞—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "success")
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —á–∞—Å—ã
                        work_hours = WorkHours(
                            employee_id=employee_id_int,
                            date=date,
                            hours=hours,
                            notes=notes
                        )
                        db.session.add(work_hours)
                        flash("–†–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã", "success")
                    
                    db.session.commit()
                except ValueError:
                    flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã", "error")
            else:
                flash("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", "error")
            
            return redirect(url_for("admin_work_hours"))
        
        employees = Employee.query.filter_by(is_active=True).all()
        return render_template("admin_work_hours.html", employees=employees)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ admin_work_hours: {e}")
        import traceback
        traceback.print_exc()
        flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤", "error")
        return redirect(url_for("dashboard"))


@app.route("/admin/cleanup_storage", methods=["POST"])
@login_required
def cleanup_storage():
    """–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if current_user.role != "–ê–¥–º–∏–Ω":
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error")
        return redirect(url_for("dashboard"))
    
    deleted_count = cleanup_old_orders()
    
    if deleted_count > 0:
        flash(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {deleted_count}")
    else:
        flash("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –Ω–æ—Ä–º–µ")
    
    return redirect(url_for("dashboard"))



@app.cli.command("init-db")
def init_db():
    db.create_all()
    users = [
        {"username": "admin", "password": "admin123", "role": "–ê–¥–º–∏–Ω"},
        {"username": "manager", "password": "5678", "role": "–ú–µ–Ω–µ–¥–∂–µ—Ä"},
        {"username": "worker", "password": "0000", "role": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"},
        {"username": "cutter", "password": "7777", "role": "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞"},
        {"username": "polisher", "password": "8888", "role": "–®–ª–∏—Ñ–æ–≤–∫–∞"},
        {"username": "monitor", "password": "9999", "role": "–ú–æ–Ω–∏—Ç–æ—Ä"}
    ]

    for u in users:
        if not User.query.filter_by(username=u["username"]).first():
            db.session.add(User(
                username=u["username"],
                password=generate_password_hash(u["password"]),
                role=u["role"]
            ))
    db.session.commit()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000)
