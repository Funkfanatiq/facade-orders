#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import Email

def cleanup_duplicate_emails():
    """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with app.app_context():
        try:
            print("üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º...")
            
            # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –ø–æ message_id
            duplicates = db.session.query(Email.message_id).group_by(Email.message_id).having(db.func.count(Email.id) > 1).all()
            
            if not duplicates:
                print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            print(f"üìß –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö message_id")
            
            total_deleted = 0
            
            for (message_id,) in duplicates:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∏—Å—å–º–∞ —Å —ç—Ç–∏–º message_id
                emails = Email.query.filter_by(message_id=message_id).order_by(Email.created_at.asc()).all()
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –ø–∏—Å—å–º–æ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è–µ–º
                for email in emails[1:]:
                    print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ: {email.subject[:50]}...")
                    db.session.delete(email)
                    total_deleted += 1
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.session.commit()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {total_deleted} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
            db.session.rollback()

def show_email_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Å–µ–º"""
    with app.app_context():
        try:
            total_emails = Email.query.count()
            inbox_emails = Email.query.filter_by(is_sent=False).count()
            sent_emails = Email.query.filter_by(is_sent=True).count()
            unread_emails = Email.query.filter_by(is_sent=False, is_read=False).count()
            
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Å–µ–º:")
            print(f"   –í—Å–µ–≥–æ –ø–∏—Å–µ–º: {total_emails}")
            print(f"   –í—Ö–æ–¥—è—â–∏—Ö: {inbox_emails}")
            print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: {sent_emails}")
            print(f"   –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {unread_emails}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º")
    print("=" * 50)
    
    show_email_stats()
    print()
    
    cleanup_duplicate_emails()
    print()
    
    show_email_stats()
    print()
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
